/************************************************************
 
    Following is the structure of the node class 
 
    class Node {
    	public :
    	int data;
    	Node *next;

    	Node(int data) {
        	this->data = data;
        	next = NULL;
    	}
	};

**************************************************************/

class Queue {
	// Define the data members
    Node * head;
     Node *tail;
    int size=0;
   public:
    Queue() {
 head = NULL;
        tail = NULL;
        size = 0;       
		// Implement the Constructor
	}
	
	/*----------------- Public Functions of Stack -----------------*/

	int getSize() {
	    return size;	// Implement the getSize() function
	}

    bool isEmpty() {
	    return size==0;	// Implement the isEmpty() function
	}

    void enqueue(int data) {
	 Node *newNode = new Node(data);
        if(head == NULL){
            head = newNode;
            tail = newNode;
        }
        else{
            tail -> next = newNode;
            tail = newNode;
        }
        size++;	// Implement the enqueue() function
	}

    int dequeue() {
        // Implement the dequeue() function
          if(isEmpty()){
            return -1;
        }
        int ans = head -> data;
        Node *temp = head;
        head = head -> next;
        delete temp;
        size--;
        return ans;
    }

    int front() {
        // Implement the front() function
         if(isEmpty()){
            return -1;
        }
        return head -> data;
    }
    
};